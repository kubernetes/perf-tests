{{$MODE := DefaultParam .CL2_MODE "Indexed"}}
{{$NODES_PER_NAMESPACE := MinInt .Nodes (DefaultParam .CL2_NODES_PER_NAMESPACE 100)}}
{{$LOAD_TEST_THROUGHPUT := DefaultParam .CL2_LOAD_TEST_THROUGHPUT 10}}
{{$STEADY_STATE_QPS := DefaultParam .CL2_STEADY_STATE_QPS 5}}
{{$token := .CL2_TOKEN }}

{{$namespaces := DivideInt .Nodes $NODES_PER_NAMESPACE}}

# Node resource configuration
{{$gpusPerNode := DefaultParam .CL2_GPUS_PER_NODE 8}}
{{$totalGPUs := MultiplyInt $gpusPerNode .Nodes}}

# fast fill job configuration - for initial fill up
{{$fillPercentage := DefaultParam .CL2_FILL_PERCENTAGE 90}}
{{$fillPodsCount := DivideInt (MultiplyInt $totalGPUs $fillPercentage) 100}}
{{$fillPodsPerNamespace := DivideInt $fillPodsCount $namespaces}}
{{$longJobSize := 1}}
{{$longJobRunningTime := DefaultParam .CL2_LONG_JOB_RUNNING_TIME "1h"}}

# churn job configuration for steady state
{{$smallJobPodsCount := SubtractInt $totalGPUs (MultiplyInt $fillPodsPerNamespace $namespaces)}}
{{$smallJobsPerNamespace := DivideInt $smallJobPodsCount $namespaces}}
{{$smallJobSize := 1}}
{{$smallJobCompletions := 10}}
{{$jobRunningTime := DefaultParam .CL2_JOB_RUNNING_TIME "30s"}}

name: dra-steady-state

namespace:
  number: {{$namespaces}}

tuningSets:
- name: FastFill
  qpsLoad:
    qps: {{$LOAD_TEST_THROUGHPUT}}
- name: SteadyState
  qpsLoad:
    qps: {{$STEADY_STATE_QPS}}

dependencies:
- name: Install dra-example-driver for test
  Method: DRATestDriver
  Timeout: 5m

steps:
- name: Start measurements
  measurements:
    - Identifier: WaitForFinishedJobs
      Method: WaitForFinishedJobs
      Params:
        action: start
        labelSelector: job-type = short-lived
    - Identifier: WaitForControlledPodsRunning
      Method: WaitForControlledPodsRunning
      Params:
        action: start
        apiVersion: batch/v1
        kind: Job
        labelSelector: job-type = long-running
        operationTimeout: 120s
    - Identifier: FastFillPodStartupLatency
      Method: PodStartupLatency
      Params:
        action: start
        labelSelector: job-type = long-running
    - Identifier: FastFillSchedulingMetrics
      Method: GenericPrometheusQuery
      Params:
        action: start
        metricName: fastfill_scheduler_latency
        metricVersion: v1
        unit: seconds
        dimensions:
        - extension_point
        queries:
        # E2E scheduling latency
        - name: E2E_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: E2E_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: E2E_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        # Scheduling-algorithm latency
        - name: Algorithm_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        # Pre-emption evaluation latency
        - name: Preemption_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: Preemption_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: Preemption_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        # Framework extension point latency (reported per extension_point label)
        - name: FrameworkDuration_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
        - name: FrameworkDuration_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
        - name: FrameworkDuration_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
- name: Create ResourceClaimTemplates in namespaces
  phases:
    - namespaceRange:
        min: 1
        max: {{$namespaces}}
      replicasPerNamespace: 1
      tuningSet: FastFill
      objectBundle:
      - basename: single-gpu
        objectTemplatePath: "resourceclaimtemplate.yaml"
- name: Fill cluster to {{$fillPercentage}}% utilization
  phases:
    - namespaceRange:
        min: 1
        max: {{$namespaces}}
      replicasPerNamespace: {{$fillPodsPerNamespace}}
      tuningSet: FastFill
      objectBundle:
      - basename: long-running
        objectTemplatePath: "long-running-job.yaml"
        templateFillMap:
          Replicas: {{$longJobSize}}
          Mode: {{$MODE}}
          Sleep: {{$longJobRunningTime}}
- name: Wait for fill pods to be running
  measurements:
    - Identifier: WaitForControlledPodsRunning
      Method: WaitForControlledPodsRunning
      Params:
        action: gather
        labelSelector: job-type = long-running
        timeout: 15m
- name: Gather measurements for long running pods
  measurements:
    - Identifier: FastFillSchedulingMetrics
      Method: GenericPrometheusQuery
      Params:
        action: gather
        metricName: fastfill_scheduler_latency
        metricVersion: v1
        unit: seconds
        dimensions:
        - extension_point
        queries:
        - name: E2E_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: E2E_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: E2E_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Preemption_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: Preemption_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: Preemption_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: FrameworkDuration_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
        - name: FrameworkDuration_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
        - name: FrameworkDuration_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
    - Identifier: FastFillPodStartupLatency
      Method: PodStartupLatency
      Params:
        action: gather
- name: reset metrics for steady state churn
  measurements:
    - Identifier: ChurnSchedulingMetrics
      Method: GenericPrometheusQuery
      Params:
        action: start
        metricName: churn_scheduler_latency
        metricVersion: v1
        unit: seconds
        dimensions:
        - extension_point
        queries:
        - name: E2E_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: E2E_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: E2E_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Preemption_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: Preemption_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: Preemption_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: FrameworkDuration_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
        - name: FrameworkDuration_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
        - name: FrameworkDuration_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
    - Identifier: ChurnPodStartupLatency
      Method: PodStartupLatency
      Params:
        action: start
        labelSelector: job-type = short-lived
        perc50Threshold: 40s
        perc90Threshold: 60s
        perc99Threshold: 80s
- name: Create steady state {{$MODE}} jobs
  phases:
    - namespaceRange:
        min: 1
        max: {{$namespaces}}
      replicasPerNamespace: {{$smallJobsPerNamespace}}
      tuningSet: SteadyState
      objectBundle:
      - basename: small
        objectTemplatePath: "job.yaml"
        templateFillMap:
          Replicas: {{$smallJobSize}}
          CompletionReplicas: {{$smallJobCompletions}}
          Mode: {{$MODE}}
          Sleep: {{$jobRunningTime}}
- name: Wait for short-lived jobs to finish
  measurements:
    - Identifier: WaitForFinishedJobs
      Method: WaitForFinishedJobs
      Params:
        action: gather
        labelSelector: job-type = short-lived
        timeout: 15m
- name: Measure scheduler metrics
  measurements:
    - Identifier: ChurnSchedulingMetrics
      Method: GenericPrometheusQuery
      Params:
        action: gather
        metricName: churn_scheduler_latency
        metricVersion: v1
        unit: seconds
        dimensions:
        - extension_point
        queries:
        - name: E2E_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: E2E_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: E2E_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Algorithm_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket[%v])) by (le))
        - name: Preemption_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: Preemption_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: Preemption_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_scheduling_algorithm_preemption_evaluation_seconds_bucket[%v])) by (le))
        - name: FrameworkDuration_P50
          query: histogram_quantile(0.50,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
        - name: FrameworkDuration_P90
          query: histogram_quantile(0.90,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
        - name: FrameworkDuration_P99
          query: histogram_quantile(0.99,
                  sum(rate(scheduler_framework_extension_point_duration_seconds_bucket[%v])) by (le,extension_point))
    - Identifier: ChurnPodStartupLatency
      Method: PodStartupLatency
      Params:
        action: gather
        perc50Threshold: 40s
        perc90Threshold: 60s
        perc99Threshold: 80s