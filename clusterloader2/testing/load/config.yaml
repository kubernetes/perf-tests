# ASSUMPTIONS:
# - Underlying cluster should have 100+ nodes.
# - Number of nodes should be divisible by NODES_PER_NAMESPACE (default 100).
# - The number of created SVCs is half the number of created RCs.
# - Only half of RCs will be assigned 1-1 to existing SVCs.

#Constants
{{$NODE_MODE := DefaultParam .NODE_MODE "allnodes"}}
{{$NODES_PER_NAMESPACE := DefaultParam .NODES_PER_NAMESPACE 100}}
{{$PODS_PER_NODE := DefaultParam .PODS_PER_NODE 30}}
{{$LOAD_TEST_THROUGHPUT := DefaultParam .LOAD_TEST_THROUGHPUT 10}}
{{$BIG_GROUP_SIZE := 250}}
{{$MEDIUM_GROUP_SIZE := 30}}
{{$SMALL_GROUP_SIZE := 5}}
{{$ENABLE_CHAOSMONKEY := DefaultParam .ENABLE_CHAOSMONKEY false}}

#Variables
{{$namespaces := DivideInt .Nodes $NODES_PER_NAMESPACE}}
{{$totalPods := MultiplyInt $namespaces $NODES_PER_NAMESPACE $PODS_PER_NODE}}
{{$saturationTime := DivideInt $totalPods $LOAD_TEST_THROUGHPUT}}
# bigRCs - 1/4 of namespace pods should be in big RCs.
{{$bigRcsPerNamespace := DivideInt (MultiplyInt $NODES_PER_NAMESPACE $PODS_PER_NODE) (MultiplyInt 4 $BIG_GROUP_SIZE)}}
# mediumRCs - 1/4 of namespace pods should be in medium RCs.
{{$mediumRcsPerNamespace := DivideInt (MultiplyInt $NODES_PER_NAMESPACE $PODS_PER_NODE) (MultiplyInt 4 $MEDIUM_GROUP_SIZE)}}
# smallRCs - 1/2 of namespace pods should be in small RCs.
{{$smallRcsPerNamespace := DivideInt (MultiplyInt $NODES_PER_NAMESPACE $PODS_PER_NODE) (MultiplyInt 2 $SMALL_GROUP_SIZE)}}


name: load
automanagedNamespaces: {{$namespaces}}
tuningSets:
- name: Sequence
  parallelismLimitedLoad:
    parallelismLimit: 1
- name: RandomizedSaturationTimeLimited
  RandomizedTimeLimitedLoad:
    timeLimit: {{$saturationTime}}s
- name: RandomizedScalingTimeLimited
  RandomizedTimeLimitedLoad:
    # The expected number of created/deleted pods is totalPods/4 when scaling,
    # as each RC changes its size from X to a uniform random value in [X/2, 3X/2].
    # To match 10 [pods/s] requirement, we need to divide saturationTime by 4.
    timeLimit: {{DivideInt $saturationTime 4}}s
{{if $ENABLE_CHAOSMONKEY}}
chaosMonkey:
  nodeFailure:
    failureRate: 0.01
    interval: 1m
    jitterFactor: 10.0
    simulatedDowntime: 10m
{{end}}
steps:
- measurements:
  - Identifier: APIResponsiveness
    Method: APIResponsiveness
    Params:
      action: reset
  - Identifier: APIResponsivenessPrometheus
    Method: APIResponsivenessPrometheus
    Params:
      action: start
  - Identifier: TestMetrics
    Method: TestMetrics
    Params:
      action: start
      nodeMode: {{$NODE_MODE}}
{{if $ENABLE_PROBES}}
  - Identifier: Probes
    Method: Probes
    Params:
      action: start
      replicasPerProbe: {{AddInt 1 (DivideInt .Nodes 200)}}
{{end}}
# Create SVCs
- phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{DivideInt (AddInt $bigRcsPerNamespace 1) 2}}
    tuningSet: Sequence
    objectBundle:
    - basename: big-service
      objectTemplatePath: service.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{DivideInt (AddInt $mediumRcsPerNamespace 1) 2}}
    tuningSet: Sequence
    objectBundle:
    - basename: medium-service
      objectTemplatePath: service.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{DivideInt (AddInt $smallRcsPerNamespace 1) 2}}
    tuningSet: Sequence
    objectBundle:
    - basename: small-service
      objectTemplatePath: service.yaml
- name: Creating SVCs
# Create RCs
- measurements:
  - Identifier: WaitForRunningRCs
    Method: WaitForControlledPodsRunning
    Params:
      action: start
      apiVersion: v1
      kind: ReplicationController
      labelSelector: group = load
      operationTimeout: 15m
- phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$bigRcsPerNamespace}}
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: big-rc
      objectTemplatePath: rc.yaml
      templateFillMap:
        ReplicasMin: {{$BIG_GROUP_SIZE}}
        ReplicasMax: {{$BIG_GROUP_SIZE}}
        SvcName: big-service
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$mediumRcsPerNamespace}}
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: medium-rc
      objectTemplatePath: rc.yaml
      templateFillMap:
        ReplicasMin: {{$MEDIUM_GROUP_SIZE}}
        ReplicasMax: {{$MEDIUM_GROUP_SIZE}}
        SvcName: medium-service
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$smallRcsPerNamespace}}
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: small-rc
      objectTemplatePath: rc.yaml
      templateFillMap:
        ReplicasMin: {{$SMALL_GROUP_SIZE}}
        ReplicasMax: {{$SMALL_GROUP_SIZE}}
        SvcName: small-service
- measurements:
  - Identifier: WaitForRunningRCs
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
- name: Creating RCs
# Scale RCs
- phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$bigRcsPerNamespace}}
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
    - basename: big-rc
      objectTemplatePath: rc.yaml
      templateFillMap:
        ReplicasMin: {{MultiplyInt $BIG_GROUP_SIZE 0.5}}
        ReplicasMax: {{MultiplyInt $BIG_GROUP_SIZE 1.5}}
        SvcName: big-service
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$mediumRcsPerNamespace}}
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
    - basename: medium-rc
      objectTemplatePath: rc.yaml
      templateFillMap:
        ReplicasMin: {{MultiplyInt $MEDIUM_GROUP_SIZE 0.5}}
        ReplicasMax: {{MultiplyInt $MEDIUM_GROUP_SIZE 1.5}}
        SvcName: medium-service
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$smallRcsPerNamespace}}
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
    - basename: small-rc
      objectTemplatePath: rc.yaml
      templateFillMap:
        ReplicasMin: {{MultiplyInt $SMALL_GROUP_SIZE 0.5}}
        ReplicasMax: {{MultiplyInt $SMALL_GROUP_SIZE 1.5}}
        SvcName: small-service
- measurements:
  - Identifier: WaitForRunningRCs
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
- name: Scaling RCs
# Delete RCs
- phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: big-rc
      objectTemplatePath: rc.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: medium-rc
      objectTemplatePath: rc.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: small-rc
      objectTemplatePath: rc.yaml
- name: Deleting RCs
- measurements:
  - Identifier: WaitForRunningRCs
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
# Delete SVCs
- phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: Sequence
    objectBundle:
    - basename: big-service
      objectTemplatePath: service.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: Sequence
    objectBundle:
    - basename: medium-service
      objectTemplatePath: service.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: Sequence
    objectBundle:
    - basename: small-service
      objectTemplatePath: service.yaml
- name: Deleting SVCs
# Collect measurements
- measurements:
  - Identifier: APIResponsiveness
    Method: APIResponsiveness
    Params:
      action: gather
  - Identifier: APIResponsivenessPrometheus
    Method: APIResponsivenessPrometheus
    Params:
      action: gather
  - Identifier: TestMetrics
    Method: TestMetrics
    Params:
      action: gather
{{if $ENABLE_PROBES}}
  - Identifier: Probes
    Method: Probes
    Params:
      action: gather
      thresholds:
        # TODO(https://github.com/kubernetes/kubernetes/issues/76012): Lower the threshold once we know what to expect.
        in_cluster_network_latency: 10s
{{end}}
