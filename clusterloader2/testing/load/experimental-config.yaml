# Experimental config for merged load and density test, see https://github.com/kubernetes/perf-tests/issues/1007

# ASSUMPTIONS:
# - Underlying cluster should have 100+ nodes.
# - Number of nodes should be divisible by NODES_PER_NAMESPACE (default 100).
# - The number of created SVCs is half the number of created Deployments.
# - Only half of Deployments will be assigned 1-1 to existing SVCs.

#Constants
{{$NODE_MODE := DefaultParam .NODE_MODE "allnodes"}}
{{$NODES_PER_NAMESPACE := DefaultParam .NODES_PER_NAMESPACE 100}}
{{$PODS_PER_NODE := DefaultParam .PODS_PER_NODE 30}}
{{$LOAD_TEST_THROUGHPUT := DefaultParam .LOAD_TEST_THROUGHPUT 10}}
{{$BIG_GROUP_SIZE := 250}}
{{$MEDIUM_GROUP_SIZE := 30}}
{{$SMALL_GROUP_SIZE := 5}}
{{$SMALL_STATEFUL_SETS_PER_NAMESPACE := 1}}
{{$MEDIUM_STATEFUL_SETS_PER_NAMESPACE := 1}}
{{$ENABLE_CHAOSMONKEY := DefaultParam .ENABLE_CHAOSMONKEY false}}
{{$PROMETHEUS_SCRAPE_KUBE_PROXY := DefaultParam .PROMETHEUS_SCRAPE_KUBE_PROXY true}}
{{$ENABLE_PROMETHEUS_API_RESPONSIVENESS := DefaultParam .ENABLE_PROMETHEUS_API_RESPONSIVENESS false}}
{{$ENABLE_CONFIGMAPS := DefaultParam .CL2_ENABLE_CONFIGMAPS true}}
{{$ENABLE_DAEMONSETS := DefaultParam .CL2_ENABLE_DAEMONSETS true}}
{{$ENABLE_JOBS := DefaultParam .CL2_ENABLE_JOBS true}}
{{$ENABLE_PVS := DefaultParam .CL2_ENABLE_PVS true}}
{{$ENABLE_SECRETS := DefaultParam .CL2_ENABLE_SECRETS true}}
{{$ENABLE_STATEFULSETS := DefaultParam .CL2_ENABLE_STATEFULSETS true}}
{{$ENABLE_NETWORKPOLICIES := DefaultParam .CL2_ENABLE_NETWORKPOLICIES false}}
{{$ENABLE_SYSTEM_POD_METRICS:= DefaultParam .ENABLE_SYSTEM_POD_METRICS true}}
{{$USE_SIMPLE_LATENCY_QUERY := DefaultParam .USE_SIMPLE_LATENCY_QUERY false}}
{{$ENABLE_RESTART_COUNT_CHECK := DefaultParam .ENABLE_RESTART_COUNT_CHECK false}}
{{$RESTART_COUNT_THRESHOLD_OVERRIDES:= DefaultParam .RESTART_COUNT_THRESHOLD_OVERRIDES ""}}
#Variables
{{$namespaces := DivideInt .Nodes $NODES_PER_NAMESPACE}}
{{$totalPods := MultiplyInt $namespaces $NODES_PER_NAMESPACE $PODS_PER_NODE}}
{{$podsPerNamespace := DivideInt $totalPods $namespaces}}
{{$saturationTime := DivideInt $totalPods $LOAD_TEST_THROUGHPUT}}
# bigDeployments - 1/4 of namespace pods should be in big Deployments.
{{$bigDeploymentsPerNamespace := DivideInt $podsPerNamespace (MultiplyInt 4 $BIG_GROUP_SIZE)}}
# mediumDeployments - 1/4 of namespace pods should be in medium Deployments.
{{$mediumDeploymentsPerNamespace := DivideInt $podsPerNamespace (MultiplyInt 4 $MEDIUM_GROUP_SIZE)}}
# smallDeployments - 1/2 of namespace pods should be in small Deployments.
{{$smallDeploymentsPerNamespace := DivideInt $podsPerNamespace (MultiplyInt 2 $SMALL_GROUP_SIZE)}}
# If StatefulSets are enabled reduce the number of small and medium deployments per namespace
{{$smallDeploymentsPerNamespace := SubtractInt $smallDeploymentsPerNamespace (IfThenElse $ENABLE_STATEFULSETS $SMALL_STATEFUL_SETS_PER_NAMESPACE 0)}}
{{$mediumDeploymentsPerNamespace := SubtractInt $mediumDeploymentsPerNamespace (IfThenElse $ENABLE_STATEFULSETS $MEDIUM_STATEFUL_SETS_PER_NAMESPACE 0)}}

# If Jobs are enabled reduce the number of small, medium, big deployments per namespace.
{{$smallDeploymentsPerNamespace := SubtractInt $smallDeploymentsPerNamespace (IfThenElse $ENABLE_JOBS 1 0)}}
{{$mediumDeploymentsPerNamespace := SubtractInt $mediumDeploymentsPerNamespace (IfThenElse $ENABLE_JOBS 1 0)}}
{{$bigDeploymentsPerNamespace := SubtractInt $bigDeploymentsPerNamespace (IfThenElse $ENABLE_JOBS 1 0)}}

# The minimal number of pods to be used to measure various things like
# pod-startup-latency or scheduler-throughput. The purpose of it is to avoid
# problems in small clusters where we wouldn't have enough samples (pods) to
# measure things accurately.
{{$MIN_PODS_IN_SMALL_CLUSTERS := 500}}

# BEGIN scheduler-throughput section
# TODO( https://github.com/kubernetes/perf-tests/issues/1027): Lower the number of "min-pods" once we fix the scheduler throughput measurement.
{{$totalSchedulerThroughputPods := MaxInt (MultiplyInt 2 $MIN_PODS_IN_SMALL_CLUSTERS) (MultiplyInt 2 .Nodes)}}
{{$schedulerThroughputPodsPerDeployment := .Nodes}}
{{$schedulerThroughputNamespaces := DivideInt $totalSchedulerThroughputPods $schedulerThroughputPodsPerDeployment}}
{{$schedulerThroughputThreshold := DefaultParam .CL2_SCHEDULER_THROUGHPUT_THRESHOLD 0}}
# END scheduler-throughput section

# TODO(https://github.com/kubernetes/perf-tests/issues/1024): Investigate and get rid of this section.
# BEGIN pod-startup-latency section
{{$totalLatencyPods := MaxInt $MIN_PODS_IN_SMALL_CLUSTERS .Nodes}}
{{$latencyReplicas := DivideInt $totalLatencyPods $namespaces}}
# END pod-startup-latency section

name: load
automanagedNamespaces: {{AddInt $namespaces $schedulerThroughputNamespaces}}
tuningSets:
- name: Sequence
  parallelismLimitedLoad:
    parallelismLimit: 1
# Dedicated tuningSet for SchedulerThroughput phases that results in fully
# parallel creation of deployments.
- name: SchedulerThroughputParallel
  parallelismLimitedLoad:
    parallelismLimit: {{$schedulerThroughputNamespaces}}
# TODO(https://github.com/kubernetes/perf-tests/issues/1024): This TuningSet is used only for pod-startup-latency, get rid of it
- name: Uniform5qps
  qpsLoad:
    qps: 5
- name: RandomizedSaturationTimeLimited
  RandomizedTimeLimitedLoad:
    timeLimit: {{$saturationTime}}s
- name: RandomizedScalingTimeLimited
  RandomizedTimeLimitedLoad:
    # The expected number of created/deleted pods is totalPods/4 when scaling,
    # as each RS changes its size from X to a uniform random value in [X/2, 3X/2].
    # To match 10 [pods/s] requirement, we need to divide saturationTime by 4.
    timeLimit: {{DivideInt $saturationTime 4}}s
{{if $ENABLE_CHAOSMONKEY}}
chaosMonkey:
  nodeFailure:
    failureRate: 0.01
    interval: 1m
    jitterFactor: 10.0
    simulatedDowntime: 10m
{{end}}
steps:
- name: Starting measurements
  measurements:
  - Identifier: APIResponsivenessPrometheus
    Method: APIResponsivenessPrometheus
    Params:
      action: start
  - Identifier: APIResponsivenessPrometheusSimple
    Method: APIResponsivenessPrometheus
    Params:
      action: start
  - Identifier: CreatePhasePodStartupLatency
    Method: PodStartupLatency
    Params:
      action: start
      labelSelector: group = load
      threshold: 1h # TODO(https://github.com/kubernetes/perf-tests/issues/1024): Ideally, this should be 5s
  - Identifier: InClusterNetworkLatency
    Method: InClusterNetworkLatency
    Params:
      action: start
      replicasPerProbe: {{AddInt 2 (DivideInt .Nodes 100)}}
  - Identifier: DnsLookupLatency
    Method: DnsLookupLatency
    Params:
      action: start
      replicasPerProbe: {{AddInt 2 (DivideInt .Nodes 100)}}
  {{if $PROMETHEUS_SCRAPE_KUBE_PROXY}}
  - Identifier: NetworkProgrammingLatency
    Method: NetworkProgrammingLatency
    Params:
      action: start
  {{end}}
  - Identifier: TestMetrics
    Method: TestMetrics
    Params:
      action: start
      nodeMode: {{$NODE_MODE}}
      systemPodMetricsEnabled: {{$ENABLE_SYSTEM_POD_METRICS}}
      restartCountThresholdOverrides: {{YamlQuote $RESTART_COUNT_THRESHOLD_OVERRIDES 4}}
      enableRestartCountCheck: {{$ENABLE_RESTART_COUNT_CHECK}}

- name: Creating SVCs
  phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{DivideInt (AddInt $bigDeploymentsPerNamespace 1) 2}}
    tuningSet: Sequence
    objectBundle:
    - basename: big-service
      objectTemplatePath: service.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{DivideInt (AddInt $mediumDeploymentsPerNamespace 1) 2}}
    tuningSet: Sequence
    objectBundle:
    - basename: medium-service
      objectTemplatePath: service.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{DivideInt (AddInt $smallDeploymentsPerNamespace 1) 2}}
    tuningSet: Sequence
    objectBundle:
    - basename: small-service
      objectTemplatePath: service.yaml

{{if $ENABLE_DAEMONSETS}}
- name: Creating PriorityClass for DaemonSets
  phases:
  - replicasPerNamespace: 1
    tuningSet: Sequence
    objectBundle:
      - basename: daemonset-priorityclass
        objectTemplatePath: daemonset-priorityclass.yaml
{{end}}

- name: Starting measurement for waiting for pods
  measurements:
  - Identifier: WaitForRunningDeployments
    Method: WaitForControlledPodsRunning
    Params:
      action: start
      apiVersion: apps/v1
      kind: Deployment
      labelSelector: group = load
      operationTimeout: 15m
  {{if $ENABLE_STATEFULSETS}}
  - Identifier: WaitForRunningStatefulSets
    Method: WaitForControlledPodsRunning
    Params:
      action: start
      apiVersion: apps/v1
      kind: StatefulSet
      labelSelector: group = load
      operationTimeout: 15m
  {{end}}
  {{if $ENABLE_DAEMONSETS}}
  - Identifier: WaitForRunningDaemonSets
    Method: WaitForControlledPodsRunning
    Params:
      action: start
      apiVersion: apps/v1
      kind: DaemonSet
      labelSelector: group = load
      operationTimeout: 15m
  {{end}}
  {{if $ENABLE_JOBS}}
  - Identifier: WaitForRunningJobs
    Method: WaitForControlledPodsRunning
    Params:
      action: start
      apiVersion: batch/v1
      kind: Job
      labelSelector: group = load
      operationTimeout: 15m
  {{end}}

- name: Creating objects
  phases:
  {{if $ENABLE_DAEMONSETS}}
  - namespaceRange:
      min: 1
      max: 1
    replicasPerNamespace: 1
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: daemonset
      objectTemplatePath: daemonset.yaml
      templateFillMap:
        Image: k8s.gcr.io/pause:3.0
  {{end}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$bigDeploymentsPerNamespace}}
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    {{if $ENABLE_CONFIGMAPS}}
    - basename: big-deployment
      objectTemplatePath: configmap.yaml
    {{end}}
    {{if $ENABLE_SECRETS}}
    - basename: big-deployment
      objectTemplatePath: secret.yaml
    {{end}}
    {{if $ENABLE_NETWORKPOLICIES}}
    - basename: big-deployment
      objectTemplatePath: networkpolicy.yaml
    {{end}}
    - basename: big-deployment
      objectTemplatePath: deployment.yaml
      templateFillMap:
        ReplicasMin: {{$BIG_GROUP_SIZE}}
        ReplicasMax: {{$BIG_GROUP_SIZE}}
        SvcName: big-service
        CpuRequest: 5m
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$mediumDeploymentsPerNamespace}}
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    {{if $ENABLE_CONFIGMAPS}}
    - basename: medium-deployment
      objectTemplatePath: configmap.yaml
    {{end}}
    {{if $ENABLE_SECRETS}}
    - basename: medium-deployment
      objectTemplatePath: secret.yaml
    {{end}}
    {{if $ENABLE_NETWORKPOLICIES}}
    - basename: medium-deployment
      objectTemplatePath: networkpolicy.yaml
    {{end}}
    - basename: medium-deployment
      objectTemplatePath: deployment.yaml
      templateFillMap:
        ReplicasMin: {{$MEDIUM_GROUP_SIZE}}
        ReplicasMax: {{$MEDIUM_GROUP_SIZE}}
        SvcName: medium-service
        CpuRequest: 5m
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$smallDeploymentsPerNamespace}}
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    {{if $ENABLE_CONFIGMAPS}}
    - basename: small-deployment
      objectTemplatePath: configmap.yaml
    {{end}}
    {{if $ENABLE_SECRETS}}
    - basename: small-deployment
      objectTemplatePath: secret.yaml
    {{end}}
    {{if $ENABLE_NETWORKPOLICIES}}
    - basename: small-deployment
      objectTemplatePath: networkpolicy.yaml
    {{end}}
    - basename: small-deployment
      objectTemplatePath: deployment.yaml
      templateFillMap:
        ReplicasMin: {{$SMALL_GROUP_SIZE}}
        ReplicasMax: {{$SMALL_GROUP_SIZE}}
        SvcName: small-service
        CpuRequest: 5m
  {{if $ENABLE_STATEFULSETS}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$SMALL_STATEFUL_SETS_PER_NAMESPACE}}
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: small-statefulset
        objectTemplatePath: statefulset_service.yaml
      - basename: small-statefulset
        objectTemplatePath: statefulset.yaml
        templateFillMap:
          ReplicasMin: {{$SMALL_GROUP_SIZE}}
          ReplicasMax: {{$SMALL_GROUP_SIZE}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$MEDIUM_STATEFUL_SETS_PER_NAMESPACE}}
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: medium-statefulset
        objectTemplatePath: statefulset_service.yaml
      - basename: medium-statefulset
        objectTemplatePath: statefulset.yaml
        templateFillMap:
          ReplicasMin: {{$MEDIUM_GROUP_SIZE}}
          ReplicasMax: {{$MEDIUM_GROUP_SIZE}}
  {{end}}
  {{if $ENABLE_JOBS}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 1
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: small-job
        objectTemplatePath: job.yaml
        templateFillMap:
          ReplicasMin: {{$SMALL_GROUP_SIZE}}
          ReplicasMax: {{$SMALL_GROUP_SIZE}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 1
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: medium-job
        objectTemplatePath: job.yaml
        templateFillMap:
          ReplicasMin: {{$MEDIUM_GROUP_SIZE}}
          ReplicasMax: {{$MEDIUM_GROUP_SIZE}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 1
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: big-job
        objectTemplatePath: job.yaml
        templateFillMap:
          ReplicasMin: {{$BIG_GROUP_SIZE}}
          ReplicasMax: {{$BIG_GROUP_SIZE}}
  {{end}}

- name: Waiting for pods to be running
  measurements:
  - Identifier: WaitForRunningDeployments
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{if $ENABLE_STATEFULSETS}}
  - Identifier: WaitForRunningStatefulSets
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{end}}
  {{if $ENABLE_DAEMONSETS}}
  - Identifier: WaitForRunningDaemonSets
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{end}}
  {{if $ENABLE_JOBS}}
  - Identifier: WaitForRunningJobs
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{end}}

# BEGIN scheduler throughput
- name: Creating scheduler throughput measurements
  measurements:
  - Identifier: HighThroughputPodStartupLatency
    Method: PodStartupLatency
    Params:
      action: start
      labelSelector: group = scheduler-throughput
      threshold: 1h # TODO(https://github.com/kubernetes/perf-tests/issues/1024): Ideally, this should be 5s
  - Identifier: WaitForSchedulerThroughputDeployments
    Method: WaitForControlledPodsRunning
    Params:
      action: start
      apiVersion: apps/v1
      kind: Deployment
      labelSelector: group = scheduler-throughput
      # The operation timeout shouldn't be less than 20m to make sure that ~10m node
      # failure won't fail the test. See https://github.com/kubernetes/kubernetes/issues/73461#issuecomment-467338711
      operationTimeout: 20m
  - Identifier: SchedulingThroughput
    Method: SchedulingThroughput
    Params:
      action: start
      labelSelector: group = scheduler-throughput
      measurmentInterval: 1s
- name: Creating scheduler throughput pods
  phases:
  - namespaceRange:
      min: {{AddInt $namespaces 1}}
      max: {{AddInt $namespaces $schedulerThroughputNamespaces}}
    replicasPerNamespace: 1
    tuningSet: SchedulerThroughputParallel
    objectBundle:
    - basename: scheduler-throughput-deployment
      objectTemplatePath: simple-deployment.yaml
      templateFillMap:
        Replicas: {{$schedulerThroughputPodsPerDeployment}}
        Group: scheduler-throughput
        CpuRequest: 1m
        MemoryRequest: 10M
- name: Waiting for scheduler throughput pods to be created
  measurements:
  - Identifier: WaitForSchedulerThroughputDeployments
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
- name: Collecting scheduler throughput measurements
  measurements:
  - Identifier: HighThroughputPodStartupLatency
    Method: PodStartupLatency
    Params:
      action: gather
  - Identifier: SchedulingThroughput
    Method: SchedulingThroughput
    Params:
      action: gather
      threshold: {{$schedulerThroughputThreshold}}
- name: Deleting scheduler throughput pods
  phases:
  - namespaceRange:
      min: {{AddInt $namespaces 1}}
      max: {{AddInt $namespaces $schedulerThroughputNamespaces}}
    replicasPerNamespace: 0
    tuningSet: SchedulerThroughputParallel
    objectBundle:
    - basename: scheduler-throughput-deployment
      objectTemplatePath: simple-deployment.yaml
- name: Waiting for scheduler throughput pods to be deleted
  measurements:
  - Identifier: WaitForSchedulerThroughputDeployments
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
# END scheduler throughput

# TODO(https://github.com/kubernetes/perf-tests/issues/1024): Ideally, we wouldn't need this section.
# BEGIN pod-startup-latency
- name: Starting latency pod measurements
  measurements:
  - Identifier: PodStartupLatency
    Method: PodStartupLatency
    Params:
      action: start
      labelSelector: group = latency
  - Identifier: WaitForRunningLatencyDeployments
    Method: WaitForControlledPodsRunning
    Params:
      action: start
      apiVersion: apps/v1
      kind: Deployment
      labelSelector: group = latency
      operationTimeout: 15m
- name: Creating latency pods
  phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$latencyReplicas}}
    tuningSet: Uniform5qps
    objectBundle:
    - basename: latency-deployment
      objectTemplatePath: simple-deployment.yaml
      templateFillMap:
        Replicas: 1
        Group: latency
        # CPU and memory requests are calculated for 1-core 4GB node.
        # Increasing allocation of both memory and cpu by 10% decreases the
        # value of priority function in scheduler by one point.
        # This results in decreased probability of choosing the same node again.
        # TODO(https://github.com/kubernetes/perf-tests/issues/1024): See whether we can get rid of this
        CpuRequest: 100m
        MemoryRequest: 350M
- name: Waiting for latency pods to be running
  measurements:
  - Identifier: WaitForRunningLatencyDeployments
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
- name: Deleting latency pods
  phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: Uniform5qps
    objectBundle:
    - basename: latency-deployment
      objectTemplatePath: simple-deployment.yaml
- name: Waiting for latency pods to be deleted
  measurements:
  - Identifier: WaitForRunningLatencyDeployments
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
- name: Collecting pod startup latency
  measurements:
  - Identifier: PodStartupLatency
    Method: PodStartupLatency
    Params:
      action: gather
# END pod-startup-latency

- name: Scaling and updating objects
  phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$bigDeploymentsPerNamespace}}
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
    - basename: big-deployment
      objectTemplatePath: deployment.yaml
      templateFillMap:
        ReplicasMin: {{MultiplyInt $BIG_GROUP_SIZE 0.5}}
        ReplicasMax: {{MultiplyInt $BIG_GROUP_SIZE 1.5}}
        SvcName: big-service
        CpuRequest: 5m
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$mediumDeploymentsPerNamespace}}
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
    - basename: medium-deployment
      objectTemplatePath: deployment.yaml
      templateFillMap:
        ReplicasMin: {{MultiplyInt $MEDIUM_GROUP_SIZE 0.5}}
        ReplicasMax: {{MultiplyInt $MEDIUM_GROUP_SIZE 1.5}}
        SvcName: medium-service
        CpuRequest: 5m
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$smallDeploymentsPerNamespace}}
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
    - basename: small-deployment
      objectTemplatePath: deployment.yaml
      templateFillMap:
        ReplicasMin: {{MultiplyInt $SMALL_GROUP_SIZE 0.5}}
        ReplicasMax: {{MultiplyInt $SMALL_GROUP_SIZE 1.5}}
        SvcName: small-service
        CpuRequest: 5m
  {{if $ENABLE_STATEFULSETS}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$SMALL_STATEFUL_SETS_PER_NAMESPACE}}
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
      - basename: small-statefulset
        objectTemplatePath: statefulset.yaml
        templateFillMap:
          ReplicasMin: {{MultiplyInt $SMALL_GROUP_SIZE 0.5}}
          ReplicasMax: {{MultiplyInt $SMALL_GROUP_SIZE 1.5}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: {{$MEDIUM_STATEFUL_SETS_PER_NAMESPACE}}
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
      - basename: medium-statefulset
        objectTemplatePath: statefulset.yaml
        templateFillMap:
          ReplicasMin: {{MultiplyInt $MEDIUM_GROUP_SIZE 0.5}}
          ReplicasMax: {{MultiplyInt $MEDIUM_GROUP_SIZE 1.5}}
  {{end}}
  {{if $ENABLE_DAEMONSETS}}
  - namespaceRange:
      min: 1
      max: 1
    replicasPerNamespace: 1
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
      - basename: daemonset
        objectTemplatePath: daemonset.yaml
        templateFillMap:
          Image: k8s.gcr.io/pause:3.1
  {{end}}
  {{if $ENABLE_JOBS}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 1
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
      - basename: small-job
        objectTemplatePath: job.yaml
        templateFillMap:
          ReplicasMin: {{MultiplyInt $SMALL_GROUP_SIZE 0.5}}
          ReplicasMax: {{MultiplyInt $SMALL_GROUP_SIZE 1.5}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 1
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
      - basename: medium-job
        objectTemplatePath: job.yaml
        templateFillMap:
          ReplicasMin: {{MultiplyInt $MEDIUM_GROUP_SIZE 0.5}}
          ReplicasMax: {{MultiplyInt $MEDIUM_GROUP_SIZE 1.5}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 1
    tuningSet: RandomizedScalingTimeLimited
    objectBundle:
      - basename: big-job
        objectTemplatePath: job.yaml
        templateFillMap:
          ReplicasMin: {{MultiplyInt $BIG_GROUP_SIZE 0.5}}
          ReplicasMax: {{MultiplyInt $BIG_GROUP_SIZE 1.5}}
  {{end}}

- name: Waiting for objects to become scaled
  measurements:
  - Identifier: WaitForRunningDeployments
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{if $ENABLE_STATEFULSETS}}
  - Identifier: WaitForRunningStatefulSets
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{end}}
  {{if $ENABLE_DAEMONSETS}}
  - Identifier: WaitForRunningDaemonSets
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{end}}
  {{if $ENABLE_JOBS}}
  - Identifier: WaitForRunningJobs
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{end}}

- name: Deleting objects
  phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: big-deployment
      objectTemplatePath: deployment.yaml
    {{if $ENABLE_CONFIGMAPS}}
    - basename: big-deployment
      objectTemplatePath: configmap.yaml
    {{end}}
    {{if $ENABLE_SECRETS}}
    - basename: big-deployment
      objectTemplatePath: secret.yaml
    {{end}}
    {{if $ENABLE_NETWORKPOLICIES}}
    - basename: big-deployment
      objectTemplatePath: networkpolicy.yaml
    {{end}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: medium-deployment
      objectTemplatePath: deployment.yaml
    {{if $ENABLE_CONFIGMAPS}}
    - basename: medium-deployment
      objectTemplatePath: configmap.yaml
    {{end}}
    {{if $ENABLE_SECRETS}}
    - basename: medium-deployment
      objectTemplatePath: secret.yaml
    {{end}}
    {{if $ENABLE_NETWORKPOLICIES}}
    - basename: medium-deployment
      objectTemplatePath: networkpolicy.yaml
    {{end}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: small-deployment
      objectTemplatePath: deployment.yaml
    {{if $ENABLE_CONFIGMAPS}}
    - basename: small-deployment
      objectTemplatePath: configmap.yaml
    {{end}}
    {{if $ENABLE_SECRETS}}
    - basename: small-deployment
      objectTemplatePath: secret.yaml
    {{end}}
    {{if $ENABLE_NETWORKPOLICIES}}
    - basename: small-deployment
      objectTemplatePath: networkpolicy.yaml
    {{end}}
  {{if $ENABLE_STATEFULSETS}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: small-statefulset
        objectTemplatePath: statefulset.yaml
      - basename: small-statefulset
        objectTemplatePath: statefulset_service.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: medium-statefulset
        objectTemplatePath: statefulset.yaml
      - basename: medium-statefulset
        objectTemplatePath: statefulset_service.yaml
  {{end}}
  {{if $ENABLE_DAEMONSETS}}
  - namespaceRange:
      min: 1
      max: 1
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: daemonset
        objectTemplatePath: daemonset.yaml
  {{end}}
  {{if $ENABLE_JOBS}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: small-job
        objectTemplatePath: job.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: medium-job
        objectTemplatePath: job.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      - basename: big-job
        objectTemplatePath: job.yaml
  {{end}}
  # If both StatefulSets and PVs were enabled we need to delete PVs manually.
  {{if and $ENABLE_STATEFULSETS $ENABLE_PVS}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      {{range $ssIndex := Loop $SMALL_STATEFUL_SETS_PER_NAMESPACE}}
      - basename: pv-small-statefulset-{{$ssIndex}}
        objectTemplatePath: pvc.yaml
        listUnknownObjectOptions:
          labelSelector:
            matchLabels:
              name: small-statefulset-{{$ssIndex}}
      {{end}}
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
      {{range $ssIndex := Loop $MEDIUM_STATEFUL_SETS_PER_NAMESPACE}}
      - basename: pv-medium-statefulset-{{$ssIndex}}
        objectTemplatePath: pvc.yaml
        listUnknownObjectOptions:
          labelSelector:
            matchLabels:
              name: medium-statefulset-{{$ssIndex}}
      {{end}}
  {{end}}

- name: Waiting for pods to be deleted
  measurements:
  - Identifier: WaitForRunningDeployments
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{if $ENABLE_STATEFULSETS}}
  - Identifier: WaitForRunningStatefulSets
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{end}}
  {{if $ENABLE_DAEMONSETS}}
  - Identifier: WaitForRunningDaemonSets
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{end}}
  {{if $ENABLE_JOBS}}
  - Identifier: WaitForRunningJobs
    Method: WaitForControlledPodsRunning
    Params:
      action: gather
  {{end}}
  {{if and $ENABLE_STATEFULSETS $ENABLE_PVS}}
  - Identifier: WaitForPVCsToBeDeleted
    Method: WaitForBoundPVCs
    Params:
      desiredPVCCount: 0
      labelSelector: group = load
      timeout: 15m
  {{end}}

{{if $ENABLE_DAEMONSETS}}
- name: Deleting PriorityClass for DaemonSets
  phases:
    - replicasPerNamespace: 0
      tuningSet: Sequence
      objectBundle:
        - basename: daemonset-priorityclass
          objectTemplatePath: daemonset-priorityclass.yaml
{{end}}

- name: Deleting SVCs
  phases:
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: Sequence
    objectBundle:
    - basename: big-service
      objectTemplatePath: service.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: Sequence
    objectBundle:
    - basename: medium-service
      objectTemplatePath: service.yaml
  - namespaceRange:
      min: 1
      max: {{$namespaces}}
    replicasPerNamespace: 0
    tuningSet: Sequence
    objectBundle:
    - basename: small-service
      objectTemplatePath: service.yaml

- name: Collecting measurements
  measurements:
  - Identifier: APIResponsivenessPrometheusSimple
    Method: APIResponsivenessPrometheus
    Params:
      action: gather
      enableViolations: true
      useSimpleLatencyQuery: true
      summaryName: APIResponsivenessPrometheus_simple
  {{if not $USE_SIMPLE_LATENCY_QUERY}}
  - Identifier: APIResponsivenessPrometheus
    Method: APIResponsivenessPrometheus
    Params:
      action: gather
  {{end}}
  - Identifier: CreatePhasePodStartupLatency
    Method: PodStartupLatency
    Params:
      action: gather
  - Identifier: InClusterNetworkLatency
    Method: InClusterNetworkLatency
    Params:
      action: gather
  - Identifier: DnsLookupLatency
    Method: DnsLookupLatency
    Params:
      action: gather
  {{if $PROMETHEUS_SCRAPE_KUBE_PROXY}}
  - Identifier: NetworkProgrammingLatency
    Method: NetworkProgrammingLatency
    Params:
      action: gather
  {{end}}
  - Identifier: TestMetrics
    Method: TestMetrics
    Params:
      action: gather
      systemPodMetricsEnabled: {{$ENABLE_SYSTEM_POD_METRICS}}
      restartCountThresholdOverrides: {{YamlQuote $RESTART_COUNT_THRESHOLD_OVERRIDES 4}}
      enableRestartCountCheck: {{$ENABLE_RESTART_COUNT_CHECK}}
